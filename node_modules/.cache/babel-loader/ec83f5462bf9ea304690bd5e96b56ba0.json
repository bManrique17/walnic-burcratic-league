{"ast":null,"code":"//src/services/DBService.js\nimport * as idb from 'idb';\nconst DATABASE_NAME = 'SERVICE_ORDERS';\nconst DATABASE_VERSION = 2;\nconst db = idb.default;\nexport const BUCKETS = ['Bucket01', 'Bucket02'];\nexport const BUSINESS_UNITS = ['BU1', 'BU2', 'BU3', 'BU4', 'BU5'];\nexport const STATUS = ['In Progress', 'Completed', 'Pending'];\nconst dbPromise = db.open(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n  /* tslint:disable */\n  switch (upgradeDb.oldVersion) {\n    case 0: // a placeholder case so that the switch block will\n    // execute when the database is first created\n    // (oldVersion is 0)\n\n    case 1:\n      upgradeDb.createObjectStore('teams', {\n        keyPath: 'id'\n      });\n      const tx = upgradeDb.transaction.objectStore('teams', 'readwrite');\n      objectStore.createIndex(\"name\", \"name\", {\n        unique: false\n      });\n      objectStore.createIndex(\"dt\", \"dt\", {\n        unique: false\n      });\n      upgradeDb.createObjectStore('matchs', {\n        keyPath: 'id'\n      });\n      const tx1 = upgradeDb.transaction.objectStore('matchs', 'readwrite');\n      objectStore.createIndex(\"team1\", \"team1\", {\n        unique: false\n      });\n      objectStore.createIndex(\"team2\", \"team2\", {\n        unique: false\n      });\n      objectStore.createIndex(\"goals1\", \"goals1\", {\n        unique: false\n      });\n      objectStore.createIndex(\"goals2\", \"goals2\", {\n        unique: false\n      });\n  }\n});\n\nclass DBService {\n  get(tablespace, key) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace).objectStore(tablespace).get(key);\n    }).catch(error => {// Do something?\n    });\n  }\n\n  getAll(tablespace, indexName, index = []) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace).objectStore(tablespace).index(indexName).getAll(index);\n    }).catch(error => {// Do something?\n    });\n  }\n\n  put(tablespace, object, key = null) {\n    return dbPromise.then(db => {\n      if (key) {\n        return db.transaction(tablespace, 'readwrite').objectStore(tablespace).put(object, key);\n      }\n\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).put(object);\n    }).catch(error => {// Do something?\n    });\n  }\n\n  delete(tablespace, key) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).delete(key);\n    }).catch(error => {// Do something?\n    });\n  }\n\n  deleteAll(tablespace) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).clear();\n    }).catch(error => {// Do something?\n    });\n  }\n\n}\n\nexport const Service = new DBService();","map":{"version":3,"sources":["/root/Escritorio/examen/walnic/src/db.js"],"names":["idb","DATABASE_NAME","DATABASE_VERSION","db","default","BUCKETS","BUSINESS_UNITS","STATUS","dbPromise","open","upgradeDb","oldVersion","createObjectStore","keyPath","tx","transaction","objectStore","createIndex","unique","tx1","DBService","get","tablespace","key","then","catch","error","getAll","indexName","index","put","object","delete","deleteAll","clear","Service"],"mappings":"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","sourcesContent":["//src/services/DBService.js\nimport * as idb from 'idb';\n\nconst DATABASE_NAME = 'SERVICE_ORDERS';\nconst DATABASE_VERSION = 2;\nconst db = idb.default;\n\nexport const BUCKETS = ['Bucket01', 'Bucket02']\nexport const BUSINESS_UNITS = ['BU1', 'BU2', 'BU3', 'BU4', 'BU5']\nexport const STATUS = ['In Progress', 'Completed', 'Pending']\n\nconst dbPromise = db.open(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n  /* tslint:disable */\n  switch (upgradeDb.oldVersion) {\n    case 0:\n    // a placeholder case so that the switch block will\n    // execute when the database is first created\n    // (oldVersion is 0)\n    case 1:\n      upgradeDb.createObjectStore('teams', { keyPath: 'id' });\n      const tx = upgradeDb.transaction.objectStore('teams', 'readwrite')\n      objectStore.createIndex(\"name\", \"name\", { unique: false });\n      objectStore.createIndex(\"dt\", \"dt\", { unique: false });\n\n      upgradeDb.createObjectStore('matchs', { keyPath: 'id' });\n      const tx1 = upgradeDb.transaction.objectStore('matchs', 'readwrite')\n      objectStore.createIndex(\"team1\", \"team1\", { unique: false });\n      objectStore.createIndex(\"team2\", \"team2\", { unique: false });\n      objectStore.createIndex(\"goals1\", \"goals1\", { unique: false });\n      objectStore.createIndex(\"goals2\", \"goals2\", { unique: false });\n  }\n});\n\nclass DBService {\n\n  get(tablespace, key) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace).objectStore(tablespace).get(key);\n    }).catch(error => {\n      // Do something?\n    });\n  }\n\n  getAll(tablespace, indexName, index = []) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace).objectStore(tablespace).index(indexName).getAll(index);\n    }).catch(error => {\n      // Do something?\n    });\n  }\n\n  put(tablespace, object, key = null) {\n    return dbPromise.then(db => {\n      if (key) {\n        return db.transaction(tablespace, 'readwrite').objectStore(tablespace).put(object, key);\n      }\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).put(object);\n    }).catch(error => {\n      // Do something?\n    });\n  }\n\n  delete(tablespace, key) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).delete(key);\n    }).catch(error => {\n      // Do something?\n    });\n  }\n\n  deleteAll(tablespace) {\n    return dbPromise.then(db => {\n      return db.transaction(tablespace, 'readwrite').objectStore(tablespace).clear();\n    }).catch(error => {\n      // Do something?\n    });\n  }\n}\n\nexport const Service = new DBService()\n"]},"metadata":{},"sourceType":"module"}